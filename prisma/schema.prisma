// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-client"
  output       = "../src/generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  role               Role               @default(USER)
  fridge             Fridge             @relation(fields: [fridgeId], references: [id])
  fridgeId           String             @unique
  friendships        Friendship[]       @relation("UserToFriend")
  friendOf           Friendship[]       @relation("FriendToUser")
  productFrequencies ProductFrequency[]
  recipes            Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friendship {
  user     User   @relation("UserToFriend", fields: [userId], references: [id])
  userId   String
  friend   User   @relation("FriendToUser", fields: [friendId], references: [id])
  friendId String

  @@id([userId, friendId])
}

model Fridge {
  id             String          @id @default(cuid())
  user           User?
  storedProducts StoredProduct[]
  meals          Meal[]
}

model Product {
  id             String             @id @default(cuid())
  name           String
  shelfLife      Int
  category       ProductCategory?   @relation(fields: [categoryId], references: [id])
  categoryId     String?
  frequencies    ProductFrequency[]
  storedProducts StoredProduct[]
  recipes        ProductInRecipe[]
}

model StoredProduct {
  fridge    Fridge   @relation(fields: [fridgeId], references: [id])
  fridgeId  String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  addedAt   DateTime @default(now())

  @@id([fridgeId, productId])
}

model ProductCategory {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

/// Counts how many times user adds a certain product
model ProductFrequency {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  frequency Int

  @@id([userId, productId])
}

model Recipe {
  id        String            @id @default(cuid())
  name      String
  content   String
  shelfLife Int
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  products  ProductInRecipe[]
  meals     Meal[]
}

model Meal {
  fridge   Fridge   @relation(fields: [fridgeId], references: [id])
  fridgeId String
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  recipeId String
  quantity Int
  addedAt  DateTime @default(now())

  @@id([fridgeId, recipeId])
}

model ProductInRecipe {
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  frequency Int

  @@id([recipeId, productId])
}

// Auth
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
