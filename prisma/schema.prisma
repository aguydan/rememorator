// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  name               String?
  hash               String
  role               Role               @default(USER)
  fridge             Fridge             @relation(fields: [fridgeId], references: [id])
  fridgeId           Int                @unique
  friendships        Friendship[]       @relation("UserToFriend")
  friendOf           Friendship[]       @relation("FriendToUser")
  productFrequencies ProductFrequency[]
  recipes            Recipe[]
  createdAt          DateTime           @default(now())
}

model Friendship {
  user     User @relation("UserToFriend", fields: [userId], references: [id])
  userId   Int
  friend   User @relation("FriendToUser", fields: [friendId], references: [id])
  friendId Int

  @@id([userId, friendId])
}

model Fridge {
  id             Int             @id @default(autoincrement())
  user           User?
  storedProducts StoredProduct[]
  meals          Meal[]
}

model Product {
  id                  Int                @id @default(autoincrement())
  name                String
  shelfLife           Int
  nutritionalContents String?
  dietaryRequirements String?
  allergens           String?
  category            ProductCategory?   @relation(fields: [categoryId], references: [id])
  categoryId          Int?
  frequencies         ProductFrequency[]
  storedProducts      StoredProduct[]
  recipes             ProductInRecipe[]
}

model StoredProduct {
  fridge    Fridge   @relation(fields: [fridgeId], references: [id])
  fridgeId  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  addedAt   DateTime @default(now())

  @@id([fridgeId, productId])
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

/// Counts how many times user adds a certain product
model ProductFrequency {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  frequency Int

  @@id([userId, productId])
}

model Recipe {
  id                  Int               @id @default(autoincrement())
  name                String
  content             String
  shelfLife           Int
  nutritionalContents String?
  dietaryRequirements String?
  allergens           String?
  user                User              @relation(fields: [userId], references: [id])
  userId              Int
  products            ProductInRecipe[]
  meals               Meal[]
}

model Meal {
  fridge   Fridge   @relation(fields: [fridgeId], references: [id])
  fridgeId Int
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  recipeId Int
  quantity Int
  addedAt  DateTime @default(now())

  @@id([fridgeId, recipeId])
}

model ProductInRecipe {
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  frequency Int

  @@id([recipeId, productId])
}
